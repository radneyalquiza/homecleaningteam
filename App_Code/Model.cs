//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

// An System.Collections.ObjectModel.ObservableCollection that raises
// individual item removal notifications on clear and prevents adding duplicates.
public class FixupCollection<T> : ObservableCollection<T>
{
    protected override void ClearItems()
    {
        new List<T>(this).ForEach(t => Remove(t));
    }

    protected override void InsertItem(int index, T item)
    {
        if (!this.Contains(item))
        {
            base.InsertItem(index, item);
        }
    }
}
public partial class Address
{
    #region Primitive Properties

    public virtual int Id
    {
        get;
        set;
    }

    public virtual Nullable<int> bldg
    {
        get;
        set;
    }

    public virtual Nullable<int> unit
    {
        get;
        set;
    }

    public virtual string street
    {
        get;
        set;
    }

    public virtual string city
    {
        get;
        set;
    }

    public virtual string postal
    {
        get;
        set;
    }

    #endregion

    #region Navigation Properties

    public virtual ICollection<Employee> Employees
    {
        get
        {
            if (_employees == null)
            {
                var newCollection = new FixupCollection<Employee>();
                newCollection.CollectionChanged += FixupEmployees;
                _employees = newCollection;
            }
            return _employees;
        }
        set
        {
            if (!ReferenceEquals(_employees, value))
            {
                var previousValue = _employees as FixupCollection<Employee>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupEmployees;
                }
                _employees = value;
                var newValue = value as FixupCollection<Employee>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupEmployees;
                }
            }
        }
    }
    private ICollection<Employee> _employees;

    public virtual ICollection<Property> Properties
    {
        get
        {
            if (_properties == null)
            {
                var newCollection = new FixupCollection<Property>();
                newCollection.CollectionChanged += FixupProperties;
                _properties = newCollection;
            }
            return _properties;
        }
        set
        {
            if (!ReferenceEquals(_properties, value))
            {
                var previousValue = _properties as FixupCollection<Property>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupProperties;
                }
                _properties = value;
                var newValue = value as FixupCollection<Property>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupProperties;
                }
            }
        }
    }
    private ICollection<Property> _properties;

    #endregion

    #region Association Fixup

    private void FixupEmployees(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Employee item in e.NewItems)
            {
                item.Address = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Employee item in e.OldItems)
            {
                if (ReferenceEquals(item.Address, this))
                {
                    item.Address = null;
                }
            }
        }
    }

    private void FixupProperties(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Property item in e.NewItems)
            {
                item.Address = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Property item in e.OldItems)
            {
                if (ReferenceEquals(item.Address, this))
                {
                    item.Address = null;
                }
            }
        }
    }

    #endregion

}
public partial class AppItem
{
    #region Primitive Properties

    public virtual int Id
    {
        get;
        set;
    }

    public virtual string name
    {
        get;
        set;
    }

    public virtual int RoomItem_Id
    {
        get { return _roomItem_Id; }
        set
        {
            if (_roomItem_Id != value)
            {
                if (RoomItem != null && RoomItem.Id != value)
                {
                    RoomItem = null;
                }
                _roomItem_Id = value;
            }
        }
    }
    private int _roomItem_Id;

    #endregion

    #region Navigation Properties

    public virtual ICollection<OptionItem> OptionItems
    {
        get
        {
            if (_optionItems == null)
            {
                var newCollection = new FixupCollection<OptionItem>();
                newCollection.CollectionChanged += FixupOptionItems;
                _optionItems = newCollection;
            }
            return _optionItems;
        }
        set
        {
            if (!ReferenceEquals(_optionItems, value))
            {
                var previousValue = _optionItems as FixupCollection<OptionItem>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupOptionItems;
                }
                _optionItems = value;
                var newValue = value as FixupCollection<OptionItem>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupOptionItems;
                }
            }
        }
    }
    private ICollection<OptionItem> _optionItems;

    public virtual RoomItem RoomItem
    {
        get { return _roomItem; }
        set
        {
            if (!ReferenceEquals(_roomItem, value))
            {
                var previousValue = _roomItem;
                _roomItem = value;
                FixupRoomItem(previousValue);
            }
        }
    }
    private RoomItem _roomItem;

    #endregion

    #region Association Fixup

    private void FixupRoomItem(RoomItem previousValue)
    {
        if (previousValue != null && previousValue.AppItems.Contains(this))
        {
            previousValue.AppItems.Remove(this);
        }

        if (RoomItem != null)
        {
            if (!RoomItem.AppItems.Contains(this))
            {
                RoomItem.AppItems.Add(this);
            }
            if (RoomItem_Id != RoomItem.Id)
            {
                RoomItem_Id = RoomItem.Id;
            }
        }
    }

    private void FixupOptionItems(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (OptionItem item in e.NewItems)
            {
                item.AppItem = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (OptionItem item in e.OldItems)
            {
                if (ReferenceEquals(item.AppItem, this))
                {
                    item.AppItem = null;
                }
            }
        }
    }

    #endregion

}
public partial class Area
{
    #region Primitive Properties

    public virtual int Id
    {
        get;
        set;
    }

    public virtual string fromMin
    {
        get;
        set;
    }

    public virtual string toMax
    {
        get;
        set;
    }

    public virtual Nullable<float> areaVal
    {
        get;
        set;
    }

    #endregion

    #region Navigation Properties

    public virtual ICollection<Property> Properties
    {
        get
        {
            if (_properties == null)
            {
                var newCollection = new FixupCollection<Property>();
                newCollection.CollectionChanged += FixupProperties;
                _properties = newCollection;
            }
            return _properties;
        }
        set
        {
            if (!ReferenceEquals(_properties, value))
            {
                var previousValue = _properties as FixupCollection<Property>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupProperties;
                }
                _properties = value;
                var newValue = value as FixupCollection<Property>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupProperties;
                }
            }
        }
    }
    private ICollection<Property> _properties;

    #endregion

    #region Association Fixup

    private void FixupProperties(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Property item in e.NewItems)
            {
                item.Area = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Property item in e.OldItems)
            {
                if (ReferenceEquals(item.Area, this))
                {
                    item.Area = null;
                }
            }
        }
    }

    #endregion

}
public partial class CleaningType
{
    #region Primitive Properties

    public virtual int Id
    {
        get;
        set;
    }

    public virtual string name
    {
        get;
        set;
    }

    public virtual Nullable<float> cTypeValue
    {
        get;
        set;
    }

    public virtual string description
    {
        get;
        set;
    }

    #endregion

    #region Navigation Properties

    public virtual ICollection<HouseItem> HouseItems
    {
        get
        {
            if (_houseItems == null)
            {
                var newCollection = new FixupCollection<HouseItem>();
                newCollection.CollectionChanged += FixupHouseItems;
                _houseItems = newCollection;
            }
            return _houseItems;
        }
        set
        {
            if (!ReferenceEquals(_houseItems, value))
            {
                var previousValue = _houseItems as FixupCollection<HouseItem>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupHouseItems;
                }
                _houseItems = value;
                var newValue = value as FixupCollection<HouseItem>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupHouseItems;
                }
            }
        }
    }
    private ICollection<HouseItem> _houseItems;

    #endregion

    #region Association Fixup

    private void FixupHouseItems(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (HouseItem item in e.NewItems)
            {
                item.CleaningType = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (HouseItem item in e.OldItems)
            {
                if (ReferenceEquals(item.CleaningType, this))
                {
                    item.CleaningType = null;
                }
            }
        }
    }

    #endregion

}
public partial class Customer
{
    #region Primitive Properties

    public virtual int Id
    {
        get;
        set;
    }

    public virtual string custID
    {
        get;
        set;
    }

    public virtual string status
    {
        get;
        set;
    }

    public virtual Nullable<System.DateTime> joinDate
    {
        get;
        set;
    }

    #endregion

    #region Navigation Properties

    public virtual ICollection<Invoice> Invoices
    {
        get
        {
            if (_invoices == null)
            {
                var newCollection = new FixupCollection<Invoice>();
                newCollection.CollectionChanged += FixupInvoices;
                _invoices = newCollection;
            }
            return _invoices;
        }
        set
        {
            if (!ReferenceEquals(_invoices, value))
            {
                var previousValue = _invoices as FixupCollection<Invoice>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupInvoices;
                }
                _invoices = value;
                var newValue = value as FixupCollection<Invoice>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupInvoices;
                }
            }
        }
    }
    private ICollection<Invoice> _invoices;

    public virtual ICollection<Person> People
    {
        get
        {
            if (_people == null)
            {
                var newCollection = new FixupCollection<Person>();
                newCollection.CollectionChanged += FixupPeople;
                _people = newCollection;
            }
            return _people;
        }
        set
        {
            if (!ReferenceEquals(_people, value))
            {
                var previousValue = _people as FixupCollection<Person>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupPeople;
                }
                _people = value;
                var newValue = value as FixupCollection<Person>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupPeople;
                }
            }
        }
    }
    private ICollection<Person> _people;

    public virtual ICollection<Property> Properties
    {
        get
        {
            if (_properties == null)
            {
                var newCollection = new FixupCollection<Property>();
                newCollection.CollectionChanged += FixupProperties;
                _properties = newCollection;
            }
            return _properties;
        }
        set
        {
            if (!ReferenceEquals(_properties, value))
            {
                var previousValue = _properties as FixupCollection<Property>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupProperties;
                }
                _properties = value;
                var newValue = value as FixupCollection<Property>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupProperties;
                }
            }
        }
    }
    private ICollection<Property> _properties;

    #endregion

    #region Association Fixup

    private void FixupInvoices(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Invoice item in e.NewItems)
            {
                item.Customer = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Invoice item in e.OldItems)
            {
                if (ReferenceEquals(item.Customer, this))
                {
                    item.Customer = null;
                }
            }
        }
    }

    private void FixupPeople(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Person item in e.NewItems)
            {
                item.Customer = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Person item in e.OldItems)
            {
                if (ReferenceEquals(item.Customer, this))
                {
                    item.Customer = null;
                }
            }
        }
    }

    private void FixupProperties(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Property item in e.NewItems)
            {
                item.Customer = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Property item in e.OldItems)
            {
                if (ReferenceEquals(item.Customer, this))
                {
                    item.Customer = null;
                }
            }
        }
    }

    #endregion

}
public partial class Employee
{
    #region Primitive Properties

    public virtual int Id
    {
        get;
        set;
    }

    public virtual string empID
    {
        get;
        set;
    }

    public virtual string status
    {
        get;
        set;
    }

    public virtual Nullable<System.DateTime> hireDate
    {
        get;
        set;
    }

    public virtual Nullable<System.DateTime> removeDate
    {
        get;
        set;
    }

    public virtual string type
    {
        get;
        set;
    }

    public virtual int Address_Id
    {
        get { return _address_Id; }
        set
        {
            if (_address_Id != value)
            {
                if (Address != null && Address.Id != value)
                {
                    Address = null;
                }
                _address_Id = value;
            }
        }
    }
    private int _address_Id;

    public virtual Nullable<decimal> rate
    {
        get;
        set;
    }

    public virtual string fname
    {
        get;
        set;
    }

    public virtual string lname
    {
        get;
        set;
    }

    public virtual string homePhone
    {
        get;
        set;
    }

    public virtual string workPhone
    {
        get;
        set;
    }

    public virtual string email1
    {
        get;
        set;
    }

    public virtual string email2
    {
        get;
        set;
    }

    public virtual string mobilePhone
    {
        get;
        set;
    }

    #endregion

    #region Navigation Properties

    public virtual Address Address
    {
        get { return _address; }
        set
        {
            if (!ReferenceEquals(_address, value))
            {
                var previousValue = _address;
                _address = value;
                FixupAddress(previousValue);
            }
        }
    }
    private Address _address;

    #endregion

    #region Association Fixup

    private void FixupAddress(Address previousValue)
    {
        if (previousValue != null && previousValue.Employees.Contains(this))
        {
            previousValue.Employees.Remove(this);
        }

        if (Address != null)
        {
            if (!Address.Employees.Contains(this))
            {
                Address.Employees.Add(this);
            }
            if (Address_Id != Address.Id)
            {
                Address_Id = Address.Id;
            }
        }
    }

    #endregion

}
public partial class Event
{
    #region Primitive Properties

    public virtual int Id
    {
        get;
        set;
    }

    public virtual string name
    {
        get;
        set;
    }

    public virtual Nullable<System.DateTime> startDate
    {
        get;
        set;
    }

    public virtual Nullable<System.DateTime> endDate
    {
        get;
        set;
    }

    public virtual Nullable<int> startTime
    {
        get;
        set;
    }

    public virtual Nullable<int> endTime
    {
        get;
        set;
    }

    public virtual int Invoice_Id
    {
        get { return _invoice_Id; }
        set
        {
            if (_invoice_Id != value)
            {
                if (Invoice != null && Invoice.Id != value)
                {
                    Invoice = null;
                }
                _invoice_Id = value;
            }
        }
    }
    private int _invoice_Id;

    public virtual string allDay
    {
        get;
        set;
    }

    public virtual string eventId
    {
        get;
        set;
    }

    public virtual string empList
    {
        get;
        set;
    }

    #endregion

    #region Navigation Properties

    public virtual Invoice Invoice
    {
        get { return _invoice; }
        set
        {
            if (!ReferenceEquals(_invoice, value))
            {
                var previousValue = _invoice;
                _invoice = value;
                FixupInvoice(previousValue);
            }
        }
    }
    private Invoice _invoice;

    #endregion

    #region Association Fixup

    private void FixupInvoice(Invoice previousValue)
    {
        if (previousValue != null && previousValue.Events.Contains(this))
        {
            previousValue.Events.Remove(this);
        }

        if (Invoice != null)
        {
            if (!Invoice.Events.Contains(this))
            {
                Invoice.Events.Add(this);
            }
            if (Invoice_Id != Invoice.Id)
            {
                Invoice_Id = Invoice.Id;
            }
        }
    }

    #endregion

}
public partial class HouseItem
{
    #region Primitive Properties

    public virtual int Id
    {
        get;
        set;
    }

    public virtual string otherInfo
    {
        get;
        set;
    }

    public virtual int CleaningType_Id
    {
        get { return _cleaningType_Id; }
        set
        {
            if (_cleaningType_Id != value)
            {
                if (CleaningType != null && CleaningType.Id != value)
                {
                    CleaningType = null;
                }
                _cleaningType_Id = value;
            }
        }
    }
    private int _cleaningType_Id;

    public virtual string HouseType
    {
        get;
        set;
    }

    public virtual string Area
    {
        get;
        set;
    }

    public virtual string Pets
    {
        get;
        set;
    }

    public virtual string HouseName
    {
        get;
        set;
    }

    #endregion

    #region Navigation Properties

    public virtual CleaningType CleaningType
    {
        get { return _cleaningType; }
        set
        {
            if (!ReferenceEquals(_cleaningType, value))
            {
                var previousValue = _cleaningType;
                _cleaningType = value;
                FixupCleaningType(previousValue);
            }
        }
    }
    private CleaningType _cleaningType;

    public virtual ICollection<RoomItem> RoomItems
    {
        get
        {
            if (_roomItems == null)
            {
                var newCollection = new FixupCollection<RoomItem>();
                newCollection.CollectionChanged += FixupRoomItems;
                _roomItems = newCollection;
            }
            return _roomItems;
        }
        set
        {
            if (!ReferenceEquals(_roomItems, value))
            {
                var previousValue = _roomItems as FixupCollection<RoomItem>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupRoomItems;
                }
                _roomItems = value;
                var newValue = value as FixupCollection<RoomItem>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupRoomItems;
                }
            }
        }
    }
    private ICollection<RoomItem> _roomItems;

    #endregion

    #region Association Fixup

    private void FixupCleaningType(CleaningType previousValue)
    {
        if (previousValue != null && previousValue.HouseItems.Contains(this))
        {
            previousValue.HouseItems.Remove(this);
        }

        if (CleaningType != null)
        {
            if (!CleaningType.HouseItems.Contains(this))
            {
                CleaningType.HouseItems.Add(this);
            }
            if (CleaningType_Id != CleaningType.Id)
            {
                CleaningType_Id = CleaningType.Id;
            }
        }
    }

    private void FixupRoomItems(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (RoomItem item in e.NewItems)
            {
                item.HouseItem = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (RoomItem item in e.OldItems)
            {
                if (ReferenceEquals(item.HouseItem, this))
                {
                    item.HouseItem = null;
                }
            }
        }
    }

    #endregion

}
public partial class HouseType
{
    #region Primitive Properties

    public virtual int Id
    {
        get;
        set;
    }

    public virtual string name
    {
        get;
        set;
    }

    public virtual Nullable<float> hTypeValue
    {
        get;
        set;
    }

    public virtual string description
    {
        get;
        set;
    }

    #endregion

    #region Navigation Properties

    public virtual ICollection<Property> Properties
    {
        get
        {
            if (_properties == null)
            {
                var newCollection = new FixupCollection<Property>();
                newCollection.CollectionChanged += FixupProperties;
                _properties = newCollection;
            }
            return _properties;
        }
        set
        {
            if (!ReferenceEquals(_properties, value))
            {
                var previousValue = _properties as FixupCollection<Property>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupProperties;
                }
                _properties = value;
                var newValue = value as FixupCollection<Property>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupProperties;
                }
            }
        }
    }
    private ICollection<Property> _properties;

    #endregion

    #region Association Fixup

    private void FixupProperties(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Property item in e.NewItems)
            {
                item.HouseType = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Property item in e.OldItems)
            {
                if (ReferenceEquals(item.HouseType, this))
                {
                    item.HouseType = null;
                }
            }
        }
    }

    #endregion

}
public partial class Invoice
{
    #region Primitive Properties

    public virtual int Id
    {
        get;
        set;
    }

    public virtual string InvoiceID
    {
        get;
        set;
    }

    public virtual string name
    {
        get;
        set;
    }

    public virtual Nullable<System.DateTime> dateCreated
    {
        get;
        set;
    }

    public virtual Nullable<System.DateTime> dateModified
    {
        get;
        set;
    }

    public virtual string paymentStatus
    {
        get;
        set;
    }

    public virtual string jobStatus
    {
        get;
        set;
    }

    public virtual string paymentMethod
    {
        get;
        set;
    }

    public virtual Nullable<System.DateTime> paymentDate
    {
        get;
        set;
    }

    public virtual int Customer_Id
    {
        get { return _customer_Id; }
        set
        {
            if (_customer_Id != value)
            {
                if (Customer != null && Customer.Id != value)
                {
                    Customer = null;
                }
                _customer_Id = value;
            }
        }
    }
    private int _customer_Id;

    public virtual int Quote_Id
    {
        get { return _quote_Id; }
        set
        {
            if (_quote_Id != value)
            {
                if (Quote != null && Quote.Id != value)
                {
                    Quote = null;
                }
                _quote_Id = value;
            }
        }
    }
    private int _quote_Id;

    #endregion

    #region Navigation Properties

    public virtual Customer Customer
    {
        get { return _customer; }
        set
        {
            if (!ReferenceEquals(_customer, value))
            {
                var previousValue = _customer;
                _customer = value;
                FixupCustomer(previousValue);
            }
        }
    }
    private Customer _customer;

    public virtual ICollection<Event> Events
    {
        get
        {
            if (_events == null)
            {
                var newCollection = new FixupCollection<Event>();
                newCollection.CollectionChanged += FixupEvents;
                _events = newCollection;
            }
            return _events;
        }
        set
        {
            if (!ReferenceEquals(_events, value))
            {
                var previousValue = _events as FixupCollection<Event>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupEvents;
                }
                _events = value;
                var newValue = value as FixupCollection<Event>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupEvents;
                }
            }
        }
    }
    private ICollection<Event> _events;

    public virtual Quote Quote
    {
        get { return _quote; }
        set
        {
            if (!ReferenceEquals(_quote, value))
            {
                var previousValue = _quote;
                _quote = value;
                FixupQuote(previousValue);
            }
        }
    }
    private Quote _quote;

    #endregion

    #region Association Fixup

    private void FixupCustomer(Customer previousValue)
    {
        if (previousValue != null && previousValue.Invoices.Contains(this))
        {
            previousValue.Invoices.Remove(this);
        }

        if (Customer != null)
        {
            if (!Customer.Invoices.Contains(this))
            {
                Customer.Invoices.Add(this);
            }
            if (Customer_Id != Customer.Id)
            {
                Customer_Id = Customer.Id;
            }
        }
    }

    private void FixupQuote(Quote previousValue)
    {
        if (previousValue != null && previousValue.Invoices.Contains(this))
        {
            previousValue.Invoices.Remove(this);
        }

        if (Quote != null)
        {
            if (!Quote.Invoices.Contains(this))
            {
                Quote.Invoices.Add(this);
            }
            if (Quote_Id != Quote.Id)
            {
                Quote_Id = Quote.Id;
            }
        }
    }

    private void FixupEvents(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Event item in e.NewItems)
            {
                item.Invoice = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Event item in e.OldItems)
            {
                if (ReferenceEquals(item.Invoice, this))
                {
                    item.Invoice = null;
                }
            }
        }
    }

    #endregion

}
public partial class OptionItem
{
    #region Primitive Properties

    public virtual int Id
    {
        get;
        set;
    }

    public virtual string name
    {
        get;
        set;
    }

    public virtual Nullable<int> time
    {
        get;
        set;
    }

    public virtual int AppItem_Id
    {
        get { return _appItem_Id; }
        set
        {
            if (_appItem_Id != value)
            {
                if (AppItem != null && AppItem.Id != value)
                {
                    AppItem = null;
                }
                _appItem_Id = value;
            }
        }
    }
    private int _appItem_Id;

    #endregion

    #region Navigation Properties

    public virtual AppItem AppItem
    {
        get { return _appItem; }
        set
        {
            if (!ReferenceEquals(_appItem, value))
            {
                var previousValue = _appItem;
                _appItem = value;
                FixupAppItem(previousValue);
            }
        }
    }
    private AppItem _appItem;

    #endregion

    #region Association Fixup

    private void FixupAppItem(AppItem previousValue)
    {
        if (previousValue != null && previousValue.OptionItems.Contains(this))
        {
            previousValue.OptionItems.Remove(this);
        }

        if (AppItem != null)
        {
            if (!AppItem.OptionItems.Contains(this))
            {
                AppItem.OptionItems.Add(this);
            }
            if (AppItem_Id != AppItem.Id)
            {
                AppItem_Id = AppItem.Id;
            }
        }
    }

    #endregion

}
public partial class Person
{
    #region Primitive Properties

    public virtual int Id
    {
        get;
        set;
    }

    public virtual string fname
    {
        get;
        set;
    }

    public virtual string lname
    {
        get;
        set;
    }

    public virtual string homePhone
    {
        get;
        set;
    }

    public virtual string workPhone
    {
        get;
        set;
    }

    public virtual string mobilePhone
    {
        get;
        set;
    }

    public virtual string email1
    {
        get;
        set;
    }

    public virtual string email2
    {
        get;
        set;
    }

    public virtual Nullable<int> Customer_Id
    {
        get { return _customer_Id; }
        set
        {
            try
            {
                _settingFK = true;
                if (_customer_Id != value)
                {
                    if (Customer != null && Customer.Id != value)
                    {
                        Customer = null;
                    }
                    _customer_Id = value;
                }
            }
            finally
            {
                _settingFK = false;
            }
        }
    }
    private Nullable<int> _customer_Id;

    #endregion

    #region Navigation Properties

    public virtual Customer Customer
    {
        get { return _customer; }
        set
        {
            if (!ReferenceEquals(_customer, value))
            {
                var previousValue = _customer;
                _customer = value;
                FixupCustomer(previousValue);
            }
        }
    }
    private Customer _customer;

    #endregion

    #region Association Fixup

    private bool _settingFK = false;

    private void FixupCustomer(Customer previousValue)
    {
        if (previousValue != null && previousValue.People.Contains(this))
        {
            previousValue.People.Remove(this);
        }

        if (Customer != null)
        {
            if (!Customer.People.Contains(this))
            {
                Customer.People.Add(this);
            }
            if (Customer_Id != Customer.Id)
            {
                Customer_Id = Customer.Id;
            }
        }
        else if (!_settingFK)
        {
            Customer_Id = null;
        }
    }

    #endregion

}
public partial class PresetItem
{
    #region Primitive Properties

    public virtual int Id
    {
        get;
        set;
    }

    public virtual Nullable<decimal> price
    {
        get;
        set;
    }

    public virtual Nullable<int> time
    {
        get;
        set;
    }

    public virtual string description
    {
        get;
        set;
    }

    public virtual string title
    {
        get;
        set;
    }

    public virtual Nullable<System.DateTime> startDate
    {
        get;
        set;
    }

    public virtual Nullable<System.DateTime> endDate
    {
        get;
        set;
    }

    #endregion

}
public partial class Property
{
    #region Primitive Properties

    public virtual int Id
    {
        get;
        set;
    }

    public virtual string name
    {
        get;
        set;
    }

    public virtual int Address_Id
    {
        get { return _address_Id; }
        set
        {
            if (_address_Id != value)
            {
                if (Address != null && Address.Id != value)
                {
                    Address = null;
                }
                _address_Id = value;
            }
        }
    }
    private int _address_Id;

    public virtual int Area_Id
    {
        get { return _area_Id; }
        set
        {
            if (_area_Id != value)
            {
                if (Area != null && Area.Id != value)
                {
                    Area = null;
                }
                _area_Id = value;
            }
        }
    }
    private int _area_Id;

    public virtual int Customer_Id
    {
        get { return _customer_Id; }
        set
        {
            if (_customer_Id != value)
            {
                if (Customer != null && Customer.Id != value)
                {
                    Customer = null;
                }
                _customer_Id = value;
            }
        }
    }
    private int _customer_Id;

    public virtual int HouseType_Id
    {
        get { return _houseType_Id; }
        set
        {
            if (_houseType_Id != value)
            {
                if (HouseType != null && HouseType.Id != value)
                {
                    HouseType = null;
                }
                _houseType_Id = value;
            }
        }
    }
    private int _houseType_Id;

    #endregion

    #region Navigation Properties

    public virtual Address Address
    {
        get { return _address; }
        set
        {
            if (!ReferenceEquals(_address, value))
            {
                var previousValue = _address;
                _address = value;
                FixupAddress(previousValue);
            }
        }
    }
    private Address _address;

    public virtual Area Area
    {
        get { return _area; }
        set
        {
            if (!ReferenceEquals(_area, value))
            {
                var previousValue = _area;
                _area = value;
                FixupArea(previousValue);
            }
        }
    }
    private Area _area;

    public virtual Customer Customer
    {
        get { return _customer; }
        set
        {
            if (!ReferenceEquals(_customer, value))
            {
                var previousValue = _customer;
                _customer = value;
                FixupCustomer(previousValue);
            }
        }
    }
    private Customer _customer;

    public virtual HouseType HouseType
    {
        get { return _houseType; }
        set
        {
            if (!ReferenceEquals(_houseType, value))
            {
                var previousValue = _houseType;
                _houseType = value;
                FixupHouseType(previousValue);
            }
        }
    }
    private HouseType _houseType;

    #endregion

    #region Association Fixup

    private void FixupAddress(Address previousValue)
    {
        if (previousValue != null && previousValue.Properties.Contains(this))
        {
            previousValue.Properties.Remove(this);
        }

        if (Address != null)
        {
            if (!Address.Properties.Contains(this))
            {
                Address.Properties.Add(this);
            }
            if (Address_Id != Address.Id)
            {
                Address_Id = Address.Id;
            }
        }
    }

    private void FixupArea(Area previousValue)
    {
        if (previousValue != null && previousValue.Properties.Contains(this))
        {
            previousValue.Properties.Remove(this);
        }

        if (Area != null)
        {
            if (!Area.Properties.Contains(this))
            {
                Area.Properties.Add(this);
            }
            if (Area_Id != Area.Id)
            {
                Area_Id = Area.Id;
            }
        }
    }

    private void FixupCustomer(Customer previousValue)
    {
        if (previousValue != null && previousValue.Properties.Contains(this))
        {
            previousValue.Properties.Remove(this);
        }

        if (Customer != null)
        {
            if (!Customer.Properties.Contains(this))
            {
                Customer.Properties.Add(this);
            }
            if (Customer_Id != Customer.Id)
            {
                Customer_Id = Customer.Id;
            }
        }
    }

    private void FixupHouseType(HouseType previousValue)
    {
        if (previousValue != null && previousValue.Properties.Contains(this))
        {
            previousValue.Properties.Remove(this);
        }

        if (HouseType != null)
        {
            if (!HouseType.Properties.Contains(this))
            {
                HouseType.Properties.Add(this);
            }
            if (HouseType_Id != HouseType.Id)
            {
                HouseType_Id = HouseType.Id;
            }
        }
    }

    #endregion

}
public partial class Quote
{
    #region Primitive Properties

    public virtual int Id
    {
        get;
        set;
    }

    public virtual string quoteCode
    {
        get;
        set;
    }

    public virtual Nullable<decimal> totalPrice
    {
        get;
        set;
    }

    public virtual Nullable<int> totalTime
    {
        get;
        set;
    }

    public virtual string name
    {
        get;
        set;
    }

    public virtual string email
    {
        get;
        set;
    }

    public virtual Nullable<System.DateTime> DateCreated
    {
        get;
        set;
    }

    public virtual string quotePath
    {
        get;
        set;
    }

    #endregion

    #region Navigation Properties

    public virtual ICollection<Invoice> Invoices
    {
        get
        {
            if (_invoices == null)
            {
                var newCollection = new FixupCollection<Invoice>();
                newCollection.CollectionChanged += FixupInvoices;
                _invoices = newCollection;
            }
            return _invoices;
        }
        set
        {
            if (!ReferenceEquals(_invoices, value))
            {
                var previousValue = _invoices as FixupCollection<Invoice>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupInvoices;
                }
                _invoices = value;
                var newValue = value as FixupCollection<Invoice>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupInvoices;
                }
            }
        }
    }
    private ICollection<Invoice> _invoices;

    #endregion

    #region Association Fixup

    private void FixupInvoices(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Invoice item in e.NewItems)
            {
                item.Quote = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Invoice item in e.OldItems)
            {
                if (ReferenceEquals(item.Quote, this))
                {
                    item.Quote = null;
                }
            }
        }
    }

    #endregion

}
public partial class Room
{
    #region Primitive Properties

    public virtual int Id
    {
        get;
        set;
    }

    public virtual string name
    {
        get;
        set;
    }

    public virtual string description
    {
        get;
        set;
    }

    #endregion

    #region Navigation Properties

    public virtual ICollection<RTQApp> RTQApps
    {
        get
        {
            if (_rTQApps == null)
            {
                var newCollection = new FixupCollection<RTQApp>();
                newCollection.CollectionChanged += FixupRTQApps;
                _rTQApps = newCollection;
            }
            return _rTQApps;
        }
        set
        {
            if (!ReferenceEquals(_rTQApps, value))
            {
                var previousValue = _rTQApps as FixupCollection<RTQApp>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupRTQApps;
                }
                _rTQApps = value;
                var newValue = value as FixupCollection<RTQApp>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupRTQApps;
                }
            }
        }
    }
    private ICollection<RTQApp> _rTQApps;

    #endregion

    #region Association Fixup

    private void FixupRTQApps(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (RTQApp item in e.NewItems)
            {
                item.Room = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (RTQApp item in e.OldItems)
            {
                if (ReferenceEquals(item.Room, this))
                {
                    item.Room = null;
                }
            }
        }
    }

    #endregion

}
public partial class RoomItem
{
    #region Primitive Properties

    public virtual int Id
    {
        get;
        set;
    }

    public virtual string nickName
    {
        get;
        set;
    }

    public virtual string name
    {
        get;
        set;
    }

    public virtual int HouseItem_Id
    {
        get { return _houseItem_Id; }
        set
        {
            if (_houseItem_Id != value)
            {
                if (HouseItem != null && HouseItem.Id != value)
                {
                    HouseItem = null;
                }
                _houseItem_Id = value;
            }
        }
    }
    private int _houseItem_Id;

    #endregion

    #region Navigation Properties

    public virtual ICollection<AppItem> AppItems
    {
        get
        {
            if (_appItems == null)
            {
                var newCollection = new FixupCollection<AppItem>();
                newCollection.CollectionChanged += FixupAppItems;
                _appItems = newCollection;
            }
            return _appItems;
        }
        set
        {
            if (!ReferenceEquals(_appItems, value))
            {
                var previousValue = _appItems as FixupCollection<AppItem>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupAppItems;
                }
                _appItems = value;
                var newValue = value as FixupCollection<AppItem>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupAppItems;
                }
            }
        }
    }
    private ICollection<AppItem> _appItems;

    public virtual HouseItem HouseItem
    {
        get { return _houseItem; }
        set
        {
            if (!ReferenceEquals(_houseItem, value))
            {
                var previousValue = _houseItem;
                _houseItem = value;
                FixupHouseItem(previousValue);
            }
        }
    }
    private HouseItem _houseItem;

    #endregion

    #region Association Fixup

    private void FixupHouseItem(HouseItem previousValue)
    {
        if (previousValue != null && previousValue.RoomItems.Contains(this))
        {
            previousValue.RoomItems.Remove(this);
        }

        if (HouseItem != null)
        {
            if (!HouseItem.RoomItems.Contains(this))
            {
                HouseItem.RoomItems.Add(this);
            }
            if (HouseItem_Id != HouseItem.Id)
            {
                HouseItem_Id = HouseItem.Id;
            }
        }
    }

    private void FixupAppItems(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (AppItem item in e.NewItems)
            {
                item.RoomItem = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (AppItem item in e.OldItems)
            {
                if (ReferenceEquals(item.RoomItem, this))
                {
                    item.RoomItem = null;
                }
            }
        }
    }

    #endregion

}
public partial class RTQApp
{
    #region Primitive Properties

    public virtual int Id
    {
        get;
        set;
    }

    public virtual string name
    {
        get;
        set;
    }

    public virtual string status
    {
        get;
        set;
    }

    public virtual string description
    {
        get;
        set;
    }

    public virtual int Room_Id
    {
        get { return _room_Id; }
        set
        {
            if (_room_Id != value)
            {
                if (Room != null && Room.Id != value)
                {
                    Room = null;
                }
                _room_Id = value;
            }
        }
    }
    private int _room_Id;

    #endregion

    #region Navigation Properties

    public virtual Room Room
    {
        get { return _room; }
        set
        {
            if (!ReferenceEquals(_room, value))
            {
                var previousValue = _room;
                _room = value;
                FixupRoom(previousValue);
            }
        }
    }
    private Room _room;

    public virtual ICollection<RTQOption> RTQOptions
    {
        get
        {
            if (_rTQOptions == null)
            {
                var newCollection = new FixupCollection<RTQOption>();
                newCollection.CollectionChanged += FixupRTQOptions;
                _rTQOptions = newCollection;
            }
            return _rTQOptions;
        }
        set
        {
            if (!ReferenceEquals(_rTQOptions, value))
            {
                var previousValue = _rTQOptions as FixupCollection<RTQOption>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupRTQOptions;
                }
                _rTQOptions = value;
                var newValue = value as FixupCollection<RTQOption>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupRTQOptions;
                }
            }
        }
    }
    private ICollection<RTQOption> _rTQOptions;

    #endregion

    #region Association Fixup

    private void FixupRoom(Room previousValue)
    {
        if (previousValue != null && previousValue.RTQApps.Contains(this))
        {
            previousValue.RTQApps.Remove(this);
        }

        if (Room != null)
        {
            if (!Room.RTQApps.Contains(this))
            {
                Room.RTQApps.Add(this);
            }
            if (Room_Id != Room.Id)
            {
                Room_Id = Room.Id;
            }
        }
    }

    private void FixupRTQOptions(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (RTQOption item in e.NewItems)
            {
                item.RTQApp = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (RTQOption item in e.OldItems)
            {
                if (ReferenceEquals(item.RTQApp, this))
                {
                    item.RTQApp = null;
                }
            }
        }
    }

    #endregion

}
public partial class RTQOption
{
    #region Primitive Properties

    public virtual int Id
    {
        get;
        set;
    }

    public virtual string name
    {
        get;
        set;
    }

    public virtual Nullable<int> time
    {
        get;
        set;
    }

    public virtual string description
    {
        get;
        set;
    }

    public virtual string status
    {
        get;
        set;
    }

    public virtual int RTQApp_Id
    {
        get { return _rTQApp_Id; }
        set
        {
            if (_rTQApp_Id != value)
            {
                if (RTQApp != null && RTQApp.Id != value)
                {
                    RTQApp = null;
                }
                _rTQApp_Id = value;
            }
        }
    }
    private int _rTQApp_Id;

    public virtual string ctype
    {
        get;
        set;
    }

    #endregion

    #region Navigation Properties

    public virtual RTQApp RTQApp
    {
        get { return _rTQApp; }
        set
        {
            if (!ReferenceEquals(_rTQApp, value))
            {
                var previousValue = _rTQApp;
                _rTQApp = value;
                FixupRTQApp(previousValue);
            }
        }
    }
    private RTQApp _rTQApp;

    public virtual ICollection<RTQOptionSub> RTQOptionSubs
    {
        get
        {
            if (_rTQOptionSubs == null)
            {
                var newCollection = new FixupCollection<RTQOptionSub>();
                newCollection.CollectionChanged += FixupRTQOptionSubs;
                _rTQOptionSubs = newCollection;
            }
            return _rTQOptionSubs;
        }
        set
        {
            if (!ReferenceEquals(_rTQOptionSubs, value))
            {
                var previousValue = _rTQOptionSubs as FixupCollection<RTQOptionSub>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupRTQOptionSubs;
                }
                _rTQOptionSubs = value;
                var newValue = value as FixupCollection<RTQOptionSub>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupRTQOptionSubs;
                }
            }
        }
    }
    private ICollection<RTQOptionSub> _rTQOptionSubs;

    #endregion

    #region Association Fixup

    private void FixupRTQApp(RTQApp previousValue)
    {
        if (previousValue != null && previousValue.RTQOptions.Contains(this))
        {
            previousValue.RTQOptions.Remove(this);
        }

        if (RTQApp != null)
        {
            if (!RTQApp.RTQOptions.Contains(this))
            {
                RTQApp.RTQOptions.Add(this);
            }
            if (RTQApp_Id != RTQApp.Id)
            {
                RTQApp_Id = RTQApp.Id;
            }
        }
    }

    private void FixupRTQOptionSubs(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (RTQOptionSub item in e.NewItems)
            {
                item.RTQOption = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (RTQOptionSub item in e.OldItems)
            {
                if (ReferenceEquals(item.RTQOption, this))
                {
                    item.RTQOption = null;
                }
            }
        }
    }

    #endregion

}
public partial class RTQOptionSub
{
    #region Primitive Properties

    public virtual int Id
    {
        get;
        set;
    }

    public virtual string name
    {
        get;
        set;
    }

    public virtual Nullable<int> time
    {
        get;
        set;
    }

    public virtual string description
    {
        get;
        set;
    }

    public virtual int RTQOption_Id
    {
        get { return _rTQOption_Id; }
        set
        {
            if (_rTQOption_Id != value)
            {
                if (RTQOption != null && RTQOption.Id != value)
                {
                    RTQOption = null;
                }
                _rTQOption_Id = value;
            }
        }
    }
    private int _rTQOption_Id;

    public virtual string ctype
    {
        get;
        set;
    }

    #endregion

    #region Navigation Properties

    public virtual RTQOption RTQOption
    {
        get { return _rTQOption; }
        set
        {
            if (!ReferenceEquals(_rTQOption, value))
            {
                var previousValue = _rTQOption;
                _rTQOption = value;
                FixupRTQOption(previousValue);
            }
        }
    }
    private RTQOption _rTQOption;

    #endregion

    #region Association Fixup

    private void FixupRTQOption(RTQOption previousValue)
    {
        if (previousValue != null && previousValue.RTQOptionSubs.Contains(this))
        {
            previousValue.RTQOptionSubs.Remove(this);
        }

        if (RTQOption != null)
        {
            if (!RTQOption.RTQOptionSubs.Contains(this))
            {
                RTQOption.RTQOptionSubs.Add(this);
            }
            if (RTQOption_Id != RTQOption.Id)
            {
                RTQOption_Id = RTQOption.Id;
            }
        }
    }

    #endregion

}
